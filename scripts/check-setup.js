#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîç Verificando configuraci√≥n del Sistema de Transcripci√≥n Cl√≠nica...\n');

// Verificar estructura de archivos
const requiredFiles = [
    'package.json',
    'api/index.js',
    'api/transcription/upload.js',
    'api/health.js',
    'api/test-env.js',
    'src/services/googleSpeechService.js',
    'src/services/geminiService.js',
    'public/index.html',
    'vercel.json'
];

console.log('üìÅ Verificando archivos requeridos:');
let allFilesExist = true;
requiredFiles.forEach(file => {
    const exists = fs.existsSync(file);
    console.log(`  ${exists ? '‚úÖ' : '‚ùå'} ${file}`);
    if (!exists) allFilesExist = false;
});

// Verificar dependencias
console.log('\nüì¶ Verificando dependencias:');
const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
const requiredDeps = [
    '@google-cloud/speech',
    '@google-cloud/storage',
    'axios',
    'cors',
    'dotenv',
    'express',
    'multer'
];

let allDepsExist = true;
requiredDeps.forEach(dep => {
    const exists = packageJson.dependencies && packageJson.dependencies[dep];
    console.log(`  ${exists ? '‚úÖ' : '‚ùå'} ${dep}`);
    if (!exists) allDepsExist = false;
});

// Verificar variables de entorno
console.log('\nüîê Verificando variables de entorno:');
const envFile = '.env';
const envExists = fs.existsSync(envFile);
console.log(`  ${envExists ? '‚úÖ' : '‚ö†Ô∏è'} Archivo .env ${envExists ? 'existe' : 'no existe'}`);

if (envExists) {
    const envContent = fs.readFileSync(envFile, 'utf8');
    const hasGoogleCreds = envContent.includes('GOOGLE_APPLICATION_CREDENTIALS');
    const hasGeminiKey = envContent.includes('GEMINI_API_KEY');
    
    console.log(`  ${hasGoogleCreds ? '‚úÖ' : '‚ùå'} GOOGLE_APPLICATION_CREDENTIALS`);
    console.log(`  ${hasGeminiKey ? '‚úÖ' : '‚ùå'} GEMINI_API_KEY`);
}

// Resumen
console.log('\nüìã RESUMEN:');
console.log(`  Archivos requeridos: ${allFilesExist ? '‚úÖ Completos' : '‚ùå Faltan archivos'}`);
console.log(`  Dependencias: ${allDepsExist ? '‚úÖ Completas' : '‚ùå Faltan dependencias'}`);
console.log(`  Variables de entorno: ${envExists ? '‚úÖ Configuradas' : '‚ö†Ô∏è No configuradas'}`);

if (!allFilesExist || !allDepsExist) {
    console.log('\n‚ùå Hay problemas que necesitan ser resueltos antes de continuar.');
    process.exit(1);
}

if (!envExists) {
    console.log('\n‚ö†Ô∏è  Para desarrollo local, crea un archivo .env con las variables necesarias.');
    console.log('   Para Vercel, configura las variables de entorno en el dashboard.');
}

console.log('\n‚úÖ Verificaci√≥n completada. El proyecto est√° listo para usar.');
console.log('\nüöÄ Para probar:');
console.log('   1. Desarrollo local: npm start');
console.log('   2. Vercel: git push (despu√©s de configurar variables de entorno)');
console.log('   3. Verificar: visita /api/test-env en tu aplicaci√≥n');